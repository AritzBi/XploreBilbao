{
  "name": "function-extended",
  "version": "0.0.9",
  "description": "Additional function extensions with a chainable api",
  "main": "index.js",
  "scripts": {
    "test": "it -r dot"
  },
  "repository": {
    "type": "git",
    "url": "git:git@github.com:doug-martin/function-extended.git"
  },
  "keywords": [
    "String",
    "extender",
    "utilities"
  ],
  "testling": {
    "files": "test/browserling.js",
    "browsers": [
      "ie/6..latest",
      "chrome/20..latest",
      "firefox/14..latest",
      "safari/latest",
      "iphone/6",
      "ipad/6"
    ]
  },
  "author": {
    "name": "Doug Martin"
  },
  "license": "MIT",
  "dependencies": {
    "extended": "~0.0.3",
    "is-extended": "~0.0.3",
    "arguments-extended": "~0.0.3"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "it": "~0.2.0",
    "grunt-it": "~0.3.0",
    "grunt-contrib-uglify": "~0.2.0",
    "grunt-contrib-jshint": "~0.4.3"
  },
  "readme": "[![Build Status](https://travis-ci.org/doug-martin/function-extended.png?branch=master)](undefined)\n\n[![browser support](https://ci.testling.com/doug-martin/function-extended.png)](https://ci.testling.com/doug-martin/function-extended)\n\n# function-extended\n\n`function-extended` is a Javascript library that can be used standalone or incorporated into [`extended`](https://github.com/doug-martin/extended)\n\n```javascript\nvar fn = require(\"function-extended\");\n```\n\nOr\n\n```javascript\nvar myextended = require(\"extended\")\n\t.register(require(\"function-extended\"));\n```\n\n## Installation\n\n```\nnpm install function-extended\n```\n\nOr [download the source](https://raw.github.com/doug-martin/function-extended/master/index.js) ([minified](https://raw.github.com/doug-martin/function-extended/master/function-extended.min.js))\n\n## Usage\n\n**`bind`**\n\nBinds a function to the specified scope, while currying any extra arguments.\n\n**`bindAll`**\n\nBinds all functions or a list of named functions to the specified scope.\n\n```javascript\nvar scope = {\n    a: \"a\",\n    b: \"b\",\n    c: \"c\",\n    aFunc: function () {\n        return this.a;\n    },\n    bFunc: function () {\n        return this.b;\n    },\n    cFunc: function () {\n        return this.c;\n    }\n};\n\nfn.bindAll(scope);\n\nscope.aFunc.call({}); //\"a\"\nscope.bFunc.call({}); //\"a\"\nscope.cFunc.call({}); //\"c\"\n\n//or\n\nfn.bindAll(scope, [\"aFunc\"]);\n\nscope.aFunc.call({}); //\"a\"\nscope.bFunc.call({}); //undefined\nscope.cFunc.call({}); //undefined\n\n```\n\n\n**`bindIgnore`**\n\nBinds a function to the specified scope while ignoring any extra arguments passed in.\n\n```javascript\nvar func = function () {\n    return [arguments.length, this.test];\n};\nvar scope = {test: true};\n\nvar fn1 = fn.bindIgnore(obj, func, \"hello\"),\n    fn2 = fn(func).bindIgnore(obj, \"hello\").f(),\n    fn3 = fn(obj).bindIgnore(func, \"hello\");\n\n\nfn1(\"world\"); //[1, true]\nfn2(\"world\"); //[1,true]\nfn3.f()(\"world\"); //[1, true];\n```\n\n**`partial`**\n\nCreates a function that does not change the eventual scope, but allows the you specify arguments that should be passed in.\n\n```javascript\nvar func = function (str) {\n    return str + \" \" + this.world;\n};\n\nvar a = fn.partial(func, \"hello\");\nvar b =fn(func).partial(\"hello\").f();\n\na.call({world: \"world\"}); //hello world\nb.call({world: \"world\"}); //hello world\n\n//With a string\n\nvar c = fn.partial(\"test\"),\n    c2 = fn(\"test2\").partial().f(),\n\nvar scope = {\n    test : function(){\n        return \"hello\";\n    },\n    test2 : function(){\n        return \"world\";\n    }\n};\nc.call(scope); //hello\nc2.call(scope); //world\n```\n\n**`applyFirst`**\n\nBinds the function to the first arguments passed in.\n\n```javascript\n\nvar func = function () {\n    return this.test;\n};\n\nvar newFn = fn.applyFirst(func);\nnewFn({test: true}); //true\n\nnewFn = fn(func).applyFirst().f();\nnewFn({test: true});\n\nvar push = fn.applyFirst(\"push\"), pop = fn(\"pop\").applyFirst().fn();\n\nvar arr = [];\npush(arr, 1);\n//arr === [1];\n\npop(arr);\n//arr === [];\n\n```\n\n**`curry`**\n\nCreate a curried function.\n\n```javascript\nvar curried = fn.curry(4, function(a,b,c,d){\n    return [a,b,c,d].join(\",\");\n});\n\ncurried(\"a\");\ncurried(\"b\");\ncurried(\"c\");\ncurried(\"d\"); //\"a,b,c,d\"\n\n//OR\n\ncurried(\"a\")(\"b\")(\"c\")(\"d\"); //\"a,b,c,d\"\n```\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/doug-martin/function-extended/issues"
  },
  "_id": "function-extended@0.0.9",
  "dist": {
    "shasum": "a0338d541bbcb3bb15ab134a89a44bd4744338ea"
  },
  "_from": "function-extended@~0.0.3",
  "_resolved": "https://registry.npmjs.org/function-extended/-/function-extended-0.0.9.tgz"
}
