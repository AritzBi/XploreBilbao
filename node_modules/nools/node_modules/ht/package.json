{
  "name": "ht",
  "version": "0.0.2",
  "description": "Hash Table Implementation for javascript",
  "main": "index.js",
  "scripts": {
    "test": "it -r dot"
  },
  "repository": {
    "type": "git",
    "url": "git:git@github.com:doug-martin/ht.git"
  },
  "keywords": [
    "Hash Table",
    "HashTable",
    "Hash",
    "Table",
    "Collections",
    "Collection"
  ],
  "testling": {
    "files": "test/browserling.js",
    "browsers": {
      "ie": [
        7,
        8,
        9,
        10
      ],
      "chrome": [
        22,
        23,
        "canary"
      ],
      "firefox": [
        15,
        17,
        "nightly"
      ],
      "opera": [
        11.6,
        12,
        "next"
      ],
      "safari": [
        "5.0.1",
        5.1
      ]
    }
  },
  "author": {
    "name": "Doug Martin"
  },
  "license": "MIT",
  "dependencies": {
    "declare.js": "~0.0.3",
    "extended": "~0.0.3",
    "is-extended": "~0.0.3",
    "array-extended": "~0.0.3"
  },
  "devDependencies": {
    "it": "~0.2.0",
    "grunt-it": "~0.2.0"
  },
  "readme": "[![Build Status](https://travis-ci.org/doug-martin/ht.png?branch=master)](https://travis-ci.org/doug-martin/ht)\n\n[![browser support](http://ci.testling.com/doug-martin/ht.png)](http://ci.testling.com/doug-martin/ht)\n\n# ht\n\n`ht` is a HashTable implementation in javascript that can be used in both node and the browser.\n\n## Installation\n\n```\nnpm install ht\n```\n\nOr [download the source](https://raw.github.com/doug-martin/ht/master/index.js) ([minified](https://raw.github.com/doug-martin/ht/master/ht.min.js))\n\n**Note** `ht` depends on [`declare.js`](https://github.com/doug-martin/declare.js), [`extended`](https://github.com/doug-martin/extended), [`is-extended`](https://github.com/doug-martin/is-extended), and [`array-extended`](https://github.com/doug-martin/array-extended)\n\n## Usage\n\nTo create a new HashTable\n\n```javascript\nvar Ht = require(\"ht\");\nvar ht = new Ht();\n```\n\n**`put(key, value)`**\n\nAdds a new key value pair to the hash table, ht supports any value as a key.\n\n```javascript\nvar key = {}, key2 = {};\nht.put(key, \"value1\");\nht.put(key2, \"value2\");\n\nht.get(key); //\"value1\";\nht.get(key2); //\"value2\";\n```\n\nIf your key contains a `hashCode`, function then that will be used to put the key value pair into the hash table.\n\n```javascript\nfunction Person(first, last){\n    this.firstName = first;\n    this.lastName = last;\n}\n\nPerson.prototype.hashCode = function(){\n    return this.firstName + this.lastName;\n}\n\nht.put(new Person(\"bob\", \"yukon\"), \"this is bob\");\nht.put(new Person(\"sally\", \"yukon\"), \"this is sally\");\n\nht.get(new Person(\"bob\", \"yukon\")); //\"this is bob\"\n\n```\n\n\n**`get(key)`**\n\nGet a a value based on the key.\n\n```javascript\nht.put(new Date(2013, 1, 22), \"value1\");\nht.put(new Date(2013, 1, 23), \"value2\");\n\nht.get(new Date(2013, 1, 22)); //\"value1\";\nht.get(new Date(2013, 1, 23); //\"value2\";\n```\n\n**`set(key)`**\n\nSet a a value based on the key.\n\n```javascript\nht.put(new Date(2013, 1, 22), \"value1\");\nht.put(new Date(2013, 1, 23), \"value2\");\n\nht.get(new Date(2013, 1, 22)); //\"value1\";\nht.get(new Date(2013, 1, 23); //\"value2\";\n\nht.set(new Date(2013, 1, 22), \"new value1\");\nht.set(new Date(2013, 1, 23), \"new value2\");\n\nht.get(new Date(2013, 1, 22)); //\"new value1\";\nht.get(new Date(2013, 1, 23); //\"new value2\";\n\n```\n\n**`remove(key)`**\n\nRemoves a key value pair.\n\n```javascript\nht.put(new Date(2013, 1, 22), \"value1\");\nht.put(new Date(2013, 1, 23), \"value2\");\n\nht.get(new Date(2013, 1, 22)); //\"value1\";\nht.get(new Date(2013, 1, 23); //\"value2\";\n\nht.remove(new Date(2013, 1, 22)); //\"value1\";\nht.remove(new Date(2013, 1, 23); //\"value2\";\n\nht.get(new Date(2013, 1, 22)); //null;\nht.get(new Date(2013, 1, 23); //null\";\n```\n\n**`contains(key)`**\n\nReturns true or false if the table does or does not contain a given key value pair.\n\n```javascript\n\nht.put(new Date(2013, 1, 22), \"value1\");\nht.put(new Date(2013, 1, 23), \"value2\");\n\nht.contains(new Date(2013, 1, 22)); //true;\nht.contains(new Date(2013, 1, 23); //true;\n\n```\n\n**`concat(hashTable`**\n\nConcats two hash tables together into a new one.\n\n```javascript\n\nvar ht1 = new Ht(), ht2 = new Ht();\n\nht1.put(new Date(2013, 1, 22), \"value1\");\nht1.put(new Date(2013, 1, 23), \"value2\");\n\nvar key = {}, key2 = {};\nht2.put(key, \"value1\");\nht2.put(key2, \"value2\");\n\nvar ht3 = ht1.concat(ht2);\n\nht3.contains(key); //true\nht3.contains(key2); //true\nht1.contains(new Date(2013, 1, 22)); //true\nht1.contains(new Date(2013, 1, 23)); //true\n```\n\n**`clear`**\n\nClear all items from the hash table\n\n```javascript\nht.put(\"key1\", \"value1\");\nht.put(\"key2\", \"value2\");\n\nht.clear();\n\nht.contains(\"key1\"); //false\nht.contains(\"key2\"); //false\n\n```\n\n**`keys`**\n\nReturns an array of all keys in the table.\n\n```javascript\nht.put(\"key1\", \"value1\");\nht.put(\"key2\", \"value2\");\n\nht.keys(); //[\"key1\", \"key2\"]\n\n```\n\n**`values`**\n\nGets all values in the hash table.\n\n```javascript\nht.put(\"key1\", \"value1\");\nht.put(\"key2\", \"value2\");\n\nht.values(); //[\"value1\", \"value2\"]\n\n```\n\n**`entrySet`**\n\nReturns an array of all key value pairs in the table.\n\n```javascript\nht.put(\"key1\", \"value1\");\nht.put(\"key2\", \"value2\");\n\nht.entrySet(); //[{key: \"key1\", value: \"value1\"}, {key: \"key2\", value: \"value2\"}]\n\n```\n\n**`isEmpty`**\n\nReturns true if the table contains any values, false otherwise.\n\n```javascript\n\nvar ht = new Ht();\n\nht.isEmpty(); //true\n\nht.put(\"key1\", \"value1\");\nht.put(\"key2\", \"value2\");\n\nht.isEmpty(); //false\n```\n\n### Array methods.\n\nEach hash table contains the following array like methods.\n\n**Note** each method will pass a key and value to the iterator instead of a value and index.\n\n```javascript\n\nht.put(\"key1\", \"value1\");\nht.put(\"key2\", \"value2\");\n\nht.forEach(function(key, value){\n    console.log(key + \" : \" + value);\n});\n\n\n```\n\n* `forEach`\n* `filter`\n* `map`\n* `every`\n* `some`\n* `reduce`\n* `reduceRight`\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/doug-martin/ht/issues"
  },
  "_id": "ht@0.0.2",
  "dist": {
    "shasum": "df853fe1c488765571b63eac8a52ccfcb71e5ce2"
  },
  "_from": "ht@~0.0.2",
  "_resolved": "https://registry.npmjs.org/ht/-/ht-0.0.2.tgz"
}
